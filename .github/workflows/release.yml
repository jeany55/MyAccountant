name: Release

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Type of change'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN_GIT }}

      # Runs a single command using the runners shell
      - name: Update version
        run: |
          VERSION=$(grep -o '[0-9]*\.[0-9]*\.[0-9]*' MyAccountant.toc)
          
          arrIN=(${VERSION//./ })
          
          MAJOR_VERSION=${arrIN[0]}
          MINOR_VERSION=${arrIN[1]}
          PATCH_VERSION=${arrIN[2]}
          VERSION_TYPE="${{ inputs.versionType }}"
          
          if [[ $VERSION_TYPE == "patch" ]]; then
            PATCH_VERSION=$(( PATCH_VERSION + 1 ))
          elif [[ $VERSION_TYPE == "minor" ]]; then
            PATCH_VERSION=0
            MINOR_VERSION=$(( MINOR_VERSION + 1 ))
          elif [[ $VERSION_TYPE == "major" ]]; then
            PATCH_VERSION=0
            MINOR_VERSION=0
            MAJOR_VERSION=$(( MAJOR_VERSION + 1 ))
          fi

          newVersion="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
          
          sed -i -e "s/$VERSION/$newVersion/g" MyAccountant.toc
          sed -i -e "s/$VERSION/$newVersion/g" MyAccountant-BCC.toc
          sed -i -e "s/$VERSION/$newVersion/g" MyAccountant-Cata.toc
          sed -i -e "s/$VERSION/$newVersion/g" MyAccountant-Classic.toc
          sed -i -e "s/$VERSION/$newVersion/g" MyAccountant-Mists.toc
          sed -i -e "s/$VERSION/$newVersion/g" MyAccountant-WOTLK.toc

          echo "VERSION=$newVersion" >> $GITHUB_ENV

      - name: Commit and tag
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN_GIT }}
        run: |
          git config user.email "bex5959@gmail.com"
          git config user.name "Service account"

          git add MyAccountant.toc
          git add MyAccountant-BCC.toc
          git add MyAccountant-Cata.toc
          git add MyAccountant-Classic.toc
          git add MyAccountant-Mists.toc
          git add MyAccountant-WOTLK.toc
          
          git commit -m "Update to version $VERSION"
          git push

          git tag -a "v$VERSION" -m "Release version ${VERSION}"
          git push origin tag "v$VERSION"

      - name: Generate zip
        run : |
          echo "Making zip for version $VERSION"
          rm -rf ./.git
          rm -rf ./.github
          rm .gitignore
          rm .lua-style
          rm LICENSE
          rm README.md

          zip -r "MyAccountant-$VERSION.zip" ./ 
      
      - name: Create release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: MyAccountant-${{ env.VERSION }}.zip
          token: ${{ secrets.ACCESS_TOKEN_GIT }}
          tag: "v${{ env.VERSION }}"
      
      - name: Upload to CurseForge
        uses: itsmeow/curseforge-upload@v3
        with:
          file_path: MyAccountant-${{ env.VERSION }}.zip
          game_endpoint: "wow"
          project_id: "1299016"
          token: ${{ secrets.CURSE_TOKEN }}
          game_versions: "11.2.0,5.5.0,4.4.2,3.4.4,1.15.7,2.5.4"